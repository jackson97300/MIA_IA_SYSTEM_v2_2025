# -*- coding: utf-8 -*-
# MIA_IA_SYSTEM_v2_2025/config/alert_config.yaml
# Configuration des canaux d'alertes pour alert_manager.py.

metadata:
  version: "2.1.5"
  updated: "2025-05-14"
  description: |
    Configuration des canaux d'alertes (Telegram, Discord, Email) et des seuils pour alert_manager.py.
    Utilisé pour envoyer des notifications sur les événements critiques (volatilité, order flow, news, microstructure, options).
    Calibré pour les 350 features IQFeed pour l’entraînement et top 150 SHAP features pour l’inférence/fallback,
    aligné avec feature_sets.yaml. Utilise exclusivement IQFeed comme source de données via data_provider.py.
    Conforme aux Phases 1 (collecte et traitement des nouvelles), 8 (auto-conscience), 13 (métriques d’options),
    15 (garde-fou microstructure), et 16 (ensemble et transfer learning).
    Supporte une architecture multi-canaux avec gestion intelligente des priorités :
      - Priorité 1–2 : Discord (journalisation uniquement)
      - Priorité 3 : Telegram + Discord
      - Priorité 4 : Telegram + Discord + Email
      - Priorité 5 : Telegram + Discord + Email + stockage local (configurable)
    Tests unitaires disponibles dans tests/test_alert_config.py.

telegram:
  enabled: true
  bot_token: "your_bot_token"
  chat_id: "your_chat_id"
  priority: 3
  priority_description: |
    Priorité pour les alertes Telegram (3=error pour alertes critiques comme volatility spikes, OI sweeps, spoofing).
    Utilisé pour priorités 3–5. Niveaux : 1=info, 2=warning, 3=error, 4=critical, 5=urgent.

discord:
  enabled: true
  webhook_url: "your_discord_webhook_url"
  priority: 1
  priority_description: |
    Priorité pour les alertes Discord (1=info pour journalisation et alertes informatives).
    Utilisé pour toutes les priorités (1–5). Niveaux : 1=info, 2=warning, 3=error, 4=critical, 5=urgent.

email:
  enabled: true
  smtp_server: "smtp.gmail.com"
  smtp_port: 587
  sender_email: "mia.ia.system@gmail.com"
  sender_password: "qgpc vvxy jwae jyrr"
  receiver_email: "lazardjackson5@gmail.com"
  priority: 4
  priority_description: |
    Priorité pour les alertes Email (4=critical pour alertes urgentes comme volume anomalies, options risks).
    Utilisé pour priorités 4–5. Niveaux : 1=info, 2=warning, 3=error, 4=critical, 5=urgent.

local_storage:
  enabled: false
  path: "data/alerts/local"
  priority: 5
  priority_description: |
    Configuration du stockage local pour les alertes de priorité 5 (urgent).
    Sauvegarde les alertes dans data/alerts/local/<market>/*.json si activé.

cache:
  enabled: true
  path: "data/cache/alert_cache.pkl"
  description: |
    Configuration de la persistance du cache pour éviter les alertes dupliquées.
    Stocké dans data/cache/alert_cache.pkl.

alert_thresholds:
  volatility_spike_threshold:
    value: 2.0
    range: [1.0, 5.0]
    description: |
      Seuil pour déclencher une alerte sur volatility_breakout_signal (méthode 1, volatility_indicators.py).
  oi_sweep_alert_threshold:
    value: 0.15
    range: [0.1, 0.3]
    description: |
      Seuil pour déclencher une alerte sur oi_sweep_count (méthode 2, orderflow_indicators.py).
  macro_event_severity_alert:
    value: 0.6
    range: [0.3, 1.0]
    description: |
      Seuil pour déclencher une alerte sur macro_event_severity (méthode 5, schedule_economic_calendar.py).
  news_impact_score_threshold:
    value: 0.5
    range: [0.0, 1.0]
    description: |
      Seuil pour déclencher une alerte sur news_impact_score (Phase 1, news_scraper.py, news_analyzer.py).
  spoofing_score_threshold:
    value: 0.7
    range: [0.5, 1.0]
    description: |
      Seuil pour déclencher une alerte sur spoofing_score (Phase 15, microstructure_guard.py).
  volume_anomaly_threshold:
    value: 0.8
    range: [0.5, 1.0]
    description: |
      Seuil pour déclencher une alerte sur volume_anomaly (Phase 15, microstructure_guard.py).
  options_risk_score_threshold:
    value: 0.6
    range: [0.3, 1.0]
    description: |
      Seuil pour déclencher une alerte sur options_risk_score (Phase 13, options_metrics.py).
  prediction_uncertainty_threshold:
    value: 0.4
    range: [0.2, 0.6]
    description: |
      Seuil pour déclencher une alerte sur prediction_uncertainty (Phase 8, self_awareness.py).

# Notes pour configuration
notes:
  - Aligné sur 350 features pour l’entraînement et 150 SHAP features pour l’inférence/fallback, conformément à feature_sets.yaml.
  - Utilise exclusivement IQFeed comme source de données via data_provider.py.
  - Conforme aux Phases 1 (collecte et traitement des nouvelles), 8 (auto-conscience), 13 (métriques d’options),
    15 (garde-fou microstructure), et 16 (ensemble et transfer learning).
  - Les envois d’alertes implémentent des retries (max 3, délai 2^attempt) via standard.py.
  - Les performances des alertes (latence, CPU, mémoire) sont enregistrées dans data/logs/alert_manager_performance.csv via psutil.
  - Tests unitaires disponibles dans tests/test_alert_config.py pour valider la configuration.
  - Sécuriser les clés API (bot_token, webhook_url, sender_password) avec secret_manager.py et des permissions strictes (ex. : chmod 600 alert_config.yaml).
  - Ajuster les seuils dans alert_thresholds en fonction des performances observées dans data/logs/market/*_performance.csv.
  - Support SMS supprimé ; peut être réintégré via un futur notificateur SMSNotifier.
  - Cache persistant stocké dans data/cache/alert_cache.pkl pour éviter les alertes dupliquées.
  - Stockage local des alertes de priorité 5 configurable via local_storage.enabled.