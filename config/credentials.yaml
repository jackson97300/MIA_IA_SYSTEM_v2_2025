# -*- coding: utf-8 -*-
# MIA_IA_SYSTEM_v2_2025/config/credentials.yaml
# Stockage sécurisé des clés API pour IQFeed, Investing.com, NewsData.io, OpenAI, et configuration des alertes email, Telegram, Discord.

metadata:
  version: "2.1.3"
  updated: "2025-05-14"
  description: |
    Configuration des identifiants pour les APIs et les systèmes d’alertes utilisés dans MIA_IA_SYSTEM_v2_2025.
    Fournit les clés API pour data_provider.py, schedule_economic_calendar.py, mind_dialogue.py, mind_voice.py,
    et les paramètres pour les alertes email, Telegram, et Discord via alert_manager.py et telegram_alert.py.
    Aligné sur les 350 features pour l’entraînement et 150 SHAP features pour l’inférence/fallback via feature_sets.yaml.
    Utilise exclusivement IQFeed comme source de données via data_provider.py.
    Conforme à la Phase 1 (collecte de données) et Phase 8 (auto-conscience pour les fonctionnalités cognitives).
    Validé via config_manager.py avec alertes alert_manager.py.
    Tests unitaires disponibles dans tests/test_credentials.py.

# Identifiants pour IQFeed
iqfeed:
  api_key: "xxx"
  description: |
    Clé API IQFeed pour data_provider.py (fetch_ohlc, fetch_dom, fetch_options, fetch_news).
    Obligatoire, validée par config_manager.py avec alertes alert_manager.py.

# Identifiants pour Investing.com
investing_com:
  api_key: "zzz"
  description: |
    Clé API Investing.com pour schedule_economic_calendar.py (événements macroéconomiques).
    Obligatoire, validée par config_manager.py avec alertes alert_manager.py.

# Identifiants pour NewsData.io
newsdata_io:
  api_keys:
    - "pub_84040fdb3a740dda9e2bad1acf27bdb3acc99"
  description: |
    Clés API NewsData.io pour fetch_news dans data_provider.py (complément gratuit à IQFeed).
    Rotation des clés pour maximiser les 200 requêtes/jour par compte.
    Une seconde clé est optionnelle pour augmenter les requêtes (ex. : 400/jour avec deux clés).
    Obligatoire, validée par config_manager.py avec alertes alert_manager.py.

# Identifiants pour l'API OpenAI
nlp:
  enabled: true
  enabled_description: |
    Active l’API OpenAI pour des réponses conversationnelles dans mind_dialogue.py et mind_voice.py.
    Utilisé pour le mode libre et des commandes comme "Résume tes stats".
  provider: "openai"
  provider_description: |
    Fournisseur de l’API NLP (actuellement OpenAI, modèle GPT-4o-mini recommandé).
  api_key: "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"
  api_key_description: |
    Clé API OpenAI pour authentification (Bearer).
    Générée sur platform.openai.com, NE PAS PARTAGER ou exposer publiquement.
    Obligatoire, validée par config_manager.py avec alertes alert_manager.py.

# Configuration pour l’envoi d’alertes email
email:
  enabled: true
  smtp_server: "smtp.gmail.com"
  smtp_port: 587
  sender_email: "mia.ia.system@gmail.com"
  sender_password: "qgpc vvxy jwae jyrr" # Remplace par le mot de passe d’application Gmail (ex. : xxyz abcd efgh ijkl)
  receiver_email: "lazardjackson5@gmail.com"
  priority: 4
  priority_description: |
    Priorité pour les alertes Email (4=critical pour alertes urgentes comme volume anomalies, options risks).
    Utilisé pour priorités 4–5. Niveaux : 1=info, 2=warning, 3=error, 4=critical, 5=urgent.
  description: |
    Configuration pour l’envoi d’alertes email via alert_manager.py.
    Utilise SMTP Gmail pour envoyer des notifications critiques (ex. : volume_anomaly, options_risk).
    sender_password doit être un mot de passe d’application généré via Google Account (2FA requis).
    Validé par config_manager.py avec alertes alert_manager.py.

telegram:
  enabled: true
  bot_token: "7197269877:AAHM9u4prvQQ4VpP-eRveRP0TaEjSfL-B1E"
  chat_id: "1132764463"
  priority: 1
  priority_description: |
    Priorité pour les alertes Telegram (1=info pour toutes les alertes, incluant volume anomalies, options risks).
    Utilisé pour priorités 1–5. Niveaux : 1=info, 2=warning, 3=error, 4=critical, 5=urgent.
  description: |
    Configuration pour l’envoi d’alertes Telegram via telegram_alert.py.
    Utilise l’API Telegram pour envoyer des notifications à @MIA_IA_SYSTEM.
    bot_token obtenu via @BotFather, chat_id via @GetIDsBot ou getUpdates.
    Validé par config_manager.py avec alertes alert_manager.py.

discord:
  enabled: true
  bot_token: "MTM3MTk5ODI2MTE4NjkyNDY5NQ.GAOfm7.h8LAcFqrJLwpW7XKkcql-RVfbfbUQUtYkK284Q" # Remplace par le nouveau bot_token (ex. : NEW_TOKEN.YYYYYYYYYYYYYYYYYYYYYYYYY)
  channel_id: "987654321" # Remplace par ton channel_id
  priority: 1
  priority_description: |
    Priorité pour les alertes Discord (1=info pour toutes les alertes, incluant volume anomalies, options risks).
    Utilisé pour priorités 1–5. Niveaux : 1=info, 2=warning, 3=error, 4=critical, 5=urgent.
  description: |
    Configuration pour l’envoi d’alertes Discord via discord_alert.py.
    Utilise l’API Discord pour envoyer des notifications au canal #alertes du serveur Mia IA System.
    bot_token obtenu via Discord Developer Portal, channel_id via Mode Développeur.
    Validé par config_manager.py avec alertes alert_manager.py.

# Notes
notes:
  - Aligné sur 350 features pour l’entraînement et 150 SHAP features pour l’inférence/fallback via feature_sets.yaml.
  - Utilise exclusivement IQFeed comme source de données via data_provider.py, conformément à la Phase 1 (collecte de données)
    et Phase 8 (auto-conscience pour les fonctionnalités cognitives).
  - Obtenir une seconde clé NewsData.io via un autre compte (ex. : e-mail alias) pour augmenter les requêtes (400/jour).
  - Stocker les clés et mots de passe en environnement sécurisé, ne jamais versionner en clair.
  - Valider toutes les clés et configurations via tests/test_credentials.py avant utilisation.
  - Protéger la clé OpenAI (nlp.api_key), le mot de passe email (email.sender_password), et les tokens Telegram/Discord
    avec des permissions strictes (ex. : chmod 600 credentials.yaml).
  - Remplacer les clés placeholders (iqfeed.api_key: "xxx", investing_com.api_key: "zzz") et les tokens Telegram/Discord
    par des valeurs valides avant utilisation.
  - Les performances des appels API et envois d’alertes (latence, CPU, mémoire) sont enregistrées via psutil dans
    data/logs/provider_performance.csv et data/logs/market/alert_manager_performance.csv.
  - La validation des clés et les appels API/envois d’alertes implémentent des retries (max 3, délai 2^attempt) via standard.py.
  - Vérifier les performances des APIs et alertes dans data/logs/provider_performance.csv et data/logs/market/alert_manager_performance.csv.