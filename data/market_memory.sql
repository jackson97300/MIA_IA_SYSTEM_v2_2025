-- Schema for market_memory.db
-- Version: 2.1.4
-- Date: 2025-05-13
-- Role: Defines tables for storing winning patterns and clusters in MIA_IA_SYSTEM_v2_2025.
-- Generated by: src/model/utils/db_setup.py
-- Notes:
-- - Used by adaptive_learning.py (method 7) to store and retrieve winning patterns for retraining.
-- - Maintained by db_maintenance.py for purging old data (>30 days).
-- - Policies Note: The official directory for routing policies is src/model/router/policies.
--   The src/model/policies directory is a residual and should be verified for removal to avoid import conflicts.
-- - Compliance: No references to dxFeed, obs_t, 320 features, or 81 features.
-- - Compatible with 350 features (training) and 150 SHAP features (inference) stored in features column.

-- Table for clusters of winning patterns
CREATE TABLE IF NOT EXISTS clusters (
    cluster_id INTEGER PRIMARY KEY AUTOINCREMENT, -- Unique identifier for each cluster
    event_type TEXT NOT NULL,                   -- Type of event (e.g., "FOMC", "NFP", "breakout")
    features TEXT NOT NULL,                     -- JSON string with feature values (e.g., '{"rsi_14": 70, "obi_score": 0.3}')
    timestamp DATETIME NOT NULL,                -- Timestamp of cluster creation
    confidence REAL DEFAULT 0.0                 -- Confidence score of the cluster (0.0 to 1.0)
);

-- Table for trade patterns linked to clusters
CREATE TABLE IF NOT EXISTS trade_patterns (
    pattern_id INTEGER PRIMARY KEY AUTOINCREMENT, -- Unique identifier for each trade pattern
    cluster_id INTEGER,                          -- Reference to clusters.cluster_id
    trade_id TEXT NOT NULL,                     -- Unique trade identifier (e.g., "ES_20250513_001")
    entry_price REAL NOT NULL,                  -- Entry price of the trade
    exit_price REAL,                            -- Exit price of the trade (NULL if open)
    profit REAL,                                -- Profit/loss of the trade (NULL if open)
    regime TEXT NOT NULL,                       -- Market regime ("trend", "range", "defensive")
    timestamp DATETIME NOT NULL,                -- Timestamp of trade entry
    FOREIGN KEY (cluster_id) REFERENCES clusters(cluster_id)
);

-- Indexes for faster queries
CREATE INDEX IF NOT EXISTS idx_clusters_timestamp ON clusters(timestamp);
CREATE INDEX IF NOT EXISTS idx_clusters_event_type ON clusters(event_type);
CREATE INDEX IF NOT EXISTS idx_patterns_cluster_id ON trade_patterns(cluster_id);
CREATE INDEX IF NOT EXISTS idx_patterns_timestamp ON trade_patterns(timestamp);
CREATE INDEX IF NOT EXISTS idx_patterns_regime ON trade_patterns(regime);

-- Comments:
-- - clusters: Stores clusters of winning patterns identified by strategy_discovery.py.
--   - cluster_id: Auto-incremented unique ID.
--   - event_type: Describes the event triggering the pattern (e.g., economic event, breakout).
--   - features: JSON string storing relevant features (e.g., rsi_14, obi_score, net_gamma).
--   - timestamp: When the cluster was created.
--   - confidence: Score indicating reliability of the cluster (used by adaptive_learning.py for method 8).
-- - trade_patterns: Stores individual trade patterns linked to clusters, used by adaptive_learning.py for retraining.
--   - pattern_id: Auto-incremented unique ID.
--   - cluster_id: Links to a cluster in the clusters table.
--   - trade_id: Unique identifier for the trade (generated by trade_executor.py).
--   - entry_price: Price at trade entry.
--   - exit_price: Price at trade exit (NULL if position still open).
--   - profit: Profit/loss in USD (NULL if position still open).
--   - regime: Market regime at trade entry (trend, range, defensive).
--   - timestamp: When the trade was entered.
-- - Indexes:
--   - idx_clusters_timestamp: Optimizes time-based queries for db_maintenance.py (e.g., purging data >30 days).
--   - idx_clusters_event_type: Optimizes queries by event type for adaptive_learning.py.
--   - idx_patterns_cluster_id: Optimizes queries by cluster_id for trade pattern analysis.
--   - idx_patterns_timestamp: Optimizes time-based queries for trade patterns.
--   - idx_patterns_regime: Optimizes queries by regime for performance analysis.
-- - Integration: Initialized by db_setup.py, validated by validate_table_schema(), and used by adaptive_learning.py.