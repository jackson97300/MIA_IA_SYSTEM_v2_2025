```sql
-- Schema for market_memory.db
-- Version: 2.1.6
-- Date: 2025-05-15
-- Role: Defines tables for storing winning patterns, clusters, training logs, and model hyperparameters in MIA_IA_SYSTEM_v2_2025.
-- Generated by: db_setup.py
-- Notes:
-- - Used by adaptive_learning.py (method 7) to store and retrieve winning patterns.
-- - Used by trade_probability.py for retraining (suggestion 9).
-- - Used by neural_pipeline.py, adaptive_learner.py, and mind_stream.py to store model hyperparameters (Proposition 2, Step 1).
-- - Maintained by db_maintenance.py for purging old data (>30 days).
-- - Policies Note: The official directory for routing policies is src/model/router/policies.
--   The src/model/policies directory is a residual and should be verified for removal to avoid import conflicts.
-- - Compliance: No references to dxFeed, obs_t, 320 features, or 81 features.

-- Table for clusters of winning patterns
CREATE TABLE IF NOT EXISTS clusters (
    cluster_id INTEGER PRIMARY KEY AUTOINCREMENT, -- Unique identifier for each cluster
    event_type TEXT NOT NULL,                   -- Type of event (e.g., "FOMC", "NFP", "breakout")
    features JSON NOT NULL,                     -- JSON object with feature values (e.g., {"rsi_14": 70, "obi_score": 0.3})
    timestamp DATETIME NOT NULL,                -- Timestamp of cluster creation
    confidence REAL DEFAULT 0.0                 -- Confidence score of the cluster (0.0 to 1.0)
);

-- Table for trade patterns linked to clusters
CREATE TABLE IF NOT EXISTS trade_patterns (
    pattern_id INTEGER PRIMARY KEY AUTOINCREMENT, -- Unique identifier for each trade pattern
    cluster_id INTEGER,                          -- Reference to clusters.cluster_id
    trade_id TEXT NOT NULL,                     -- Unique trade identifier (e.g., "ES_20250513_001")
    entry_price REAL NOT NULL,                  -- Entry price of the trade
    exit_price REAL,                            -- Exit price of the trade (NULL if open)
    profit REAL,                                -- Profit/loss of the trade (NULL if open)
    regime TEXT NOT NULL,                       -- Market regime ("trend", "range", "defensive")
    timestamp DATETIME NOT NULL,                -- Timestamp of trade entry
    FOREIGN KEY (cluster_id) REFERENCES clusters(cluster_id)
);

-- Table for tracking model retraining (suggestion 9)
CREATE TABLE IF NOT EXISTS training_log (
    id INTEGER PRIMARY KEY AUTOINCREMENT,       -- Unique identifier
    timestamp DATETIME NOT NULL                -- Timestamp of retraining
);

-- Table for storing model hyperparameters and metrics (Proposition 2, Step 1)
CREATE TABLE IF NOT EXISTS meta_runs (
    run_id INTEGER PRIMARY KEY AUTOINCREMENT,   -- Unique identifier for each run
    timestamp DATETIME NOT NULL,               -- Timestamp of the run
    trade_id INTEGER NOT NULL,                 -- Trade ID (0 if not trade-specific)
    metrics JSON NOT NULL,                     -- JSON object with performance metrics (e.g., {"lstm_val_loss": 0.123, "average_loss": 0.456})
    hyperparameters JSON NOT NULL,             -- JSON object with hyperparameters (e.g., {"lstm": {"units": 128, "dropout": 0.2}, ...})
    performance REAL NOT NULL,                 -- Overall performance score (e.g., average_loss)
    regime TEXT NOT NULL,                      -- Market regime ("trend", "range", "defensive")
    session TEXT NOT NULL,                     -- Trading session (e.g., "unknown")
    shap_metrics JSON NOT NULL,                -- JSON object with SHAP metrics (empty by default)
    context JSON NOT NULL                      -- JSON object with run context (e.g., {"pipeline": "neural_pipeline"})
);

-- Indexes for faster queries
CREATE INDEX IF NOT EXISTS idx_clusters_timestamp ON clusters(timestamp);
CREATE INDEX IF NOT EXISTS idx_clusters_event_type ON clusters(event_type);
CREATE INDEX IF NOT EXISTS idx_patterns_cluster_id ON trade_patterns(cluster_id);
CREATE INDEX IF NOT EXISTS idx_patterns_timestamp ON trade_patterns(timestamp);
CREATE INDEX IF NOT EXISTS idx_patterns_regime ON trade_patterns(regime);
CREATE INDEX IF NOT EXISTS idx_training_log_timestamp ON training_log(timestamp);
CREATE INDEX IF NOT EXISTS idx_meta_runs_timestamp ON meta_runs(timestamp);
CREATE INDEX IF NOT EXISTS idx_meta_runs_regime ON meta_runs(regime);

-- Comments:
-- - clusters: Stores clusters of winning patterns identified by strategy_discovery.py.
--   - cluster_id: Auto-incremented unique ID.
--   - event_type: Describes the event triggering the pattern (e.g., economic event, breakout).
--   - features: JSON object storing relevant features (e.g., rsi_14, obi_score, net_gamma).
--   - timestamp: When the cluster was created.
--   - confidence: Score indicating reliability of the cluster (used by adaptive_learning.py).
-- - trade_patterns: Stores individual trade patterns linked to clusters, used by adaptive_learning.py for retraining.
--   - pattern_id: Auto-incremented unique ID.
--   - cluster_id: Links to a cluster in the clusters table.
--   - trade_id: Unique identifier for the trade (generated by trade_executor.py).
--   - entry_price: Price at trade entry.
--   - exit_price: Price at trade exit (NULL if position still open).
--   - profit: Profit/loss in USD (NULL if position still open).
--   - regime: Market regime at trade entry (trend, range, defensive).
--   - timestamp: When the trade was entered.
-- - training_log: Tracks model retraining timestamps (suggestion 9).
--   - id: Auto-incremented unique ID.
--   - timestamp: Timestamp of retraining.
-- - meta_runs: Stores model hyperparameters and performance metrics for neural_pipeline.py, adaptive_learner.py, and mind_stream.py.
--   - run_id: Auto-incremented unique ID.
--   - timestamp: When the run was recorded.
--   - trade_id: Trade identifier (0 if not linked to a specific trade).
--   - metrics: JSON object with model performance metrics (e.g., validation loss, accuracy).
--   - hyperparameters: JSON object with model hyperparameters (e.g., lstm units, dropout).
--   - performance: Overall performance score (e.g., average loss across models).
--   - regime: Market regime during the run.
--   - session: Trading session identifier.
--   - shap_metrics: JSON object for SHAP feature importance metrics (empty by default).
--   - context: JSON object with execution context (e.g., pipeline name).
-- - Indexes: Improve query performance for db_maintenance.py (e.g., purging old data) and adaptive_learning.py (e.g., retrieving recent patterns).
```

